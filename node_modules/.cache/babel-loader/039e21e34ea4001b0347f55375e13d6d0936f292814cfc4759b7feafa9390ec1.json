{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nconst useWordle = solution => {\n  _s();\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [guesses, setGuesses] = useState([]);\n  const [history, setHistory] = useState([]);\n  const [isCorrect, setIsCorrect] = useState(false);\n\n  //format a guess into an array of letter Objects\n  const formatGuess = () => {};\n  const addNewGuess = () => {};\n\n  //tracking current guess, user input\n  const handleKeyup = _ref => {\n    let {\n      key\n    } = _ref;\n    if (key === 'Enter') {\n      //only add guess if turn is less than 5\n      if (turn > 5) {\n        console.log('you used all your guesses');\n        return;\n      }\n      // do not allow duplicate words\n      if (history.includes(currentGuess)) {\n        console.log('you already tried that word');\n        return;\n      }\n      //check word is 5 chars word\n      if (currentGuess.length !== 5) {\n        console.log('word muss be 5 char long');\n        return;\n      }\n    }\n    if (key === 'Backspace') {\n      setCurrentGuess(prev => {\n        return prev.slice(0, -1); //return new string based on old string, remove letter\n      });\n\n      return;\n    }\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess(prev => {\n          return prev + key;\n        });\n      }\n    }\n  };\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyup\n  };\n};\n_s(useWordle, \"cEsMVLAILFGQggpZhG+bSZgfUqA=\");\nexport default useWordle;","map":{"version":3,"names":["useState","useWordle","solution","_s","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","history","setHistory","isCorrect","setIsCorrect","formatGuess","addNewGuess","handleKeyup","_ref","key","console","log","includes","length","prev","slice","test"],"sources":["/Users/alicia/Documents/wordle/src/hooks/useWordle.js"],"sourcesContent":["import { useState } from \"react\"\nconst useWordle = (solution) =>{\n    const[turn, setTurn] = useState(0)\n    const[currentGuess, setCurrentGuess] = useState(\"\")\n    const[guesses, setGuesses] = useState([])\n    const[history, setHistory] = useState([])\n    const[isCorrect, setIsCorrect] = useState(false)\n\n    //format a guess into an array of letter Objects\n    const formatGuess = () => {\n\n    }\n\n    const addNewGuess = () => {\n\n    }\n\n\n    //tracking current guess, user input\n    const handleKeyup = ({key}) => {\n        if(key === 'Enter'){\n            //only add guess if turn is less than 5\n            if(turn > 5){\n                console.log('you used all your guesses')\n                return\n            }\n            // do not allow duplicate words\n            if(history.includes(currentGuess)){\n                console.log('you already tried that word')\n                return\n            }\n            //check word is 5 chars word\n            if(currentGuess.length !== 5){\n                console.log('word muss be 5 char long')\n                return\n            }\n\n        }\n        if(key === 'Backspace'){\n            setCurrentGuess((prev) => {\n                return prev.slice(0, -1) //return new string based on old string, remove letter\n            })\n            return\n        }\n        if(/^[A-Za-z]$/.test(key)){\n            if(currentGuess.length < 5){\n                setCurrentGuess((prev) => {\n                    return prev + key\n                })\n            }\n        }\n    }\n\n    return{turn, currentGuess, guesses, isCorrect, handleKeyup}\n}\n\n\nexport default useWordle"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,MAAMC,SAAS,GAAIC,QAAQ,IAAI;EAAAC,EAAA;EAC3B,MAAK,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC;EAClC,MAAK,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACnD,MAAK,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACzC,MAAK,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACzC,MAAK,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;;EAEhD;EACA,MAAMc,WAAW,GAAGA,CAAA,KAAM,CAE1B,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM,CAE1B,CAAC;;EAGD;EACA,MAAMC,WAAW,GAAGC,IAAA,IAAW;IAAA,IAAV;MAACC;IAAG,CAAC,GAAAD,IAAA;IACtB,IAAGC,GAAG,KAAK,OAAO,EAAC;MACf;MACA,IAAGd,IAAI,GAAG,CAAC,EAAC;QACRe,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;QACxC;MACJ;MACA;MACA,IAAGV,OAAO,CAACW,QAAQ,CAACf,YAAY,CAAC,EAAC;QAC9Ba,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;QAC1C;MACJ;MACA;MACA,IAAGd,YAAY,CAACgB,MAAM,KAAK,CAAC,EAAC;QACzBH,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;QACvC;MACJ;IAEJ;IACA,IAAGF,GAAG,KAAK,WAAW,EAAC;MACnBX,eAAe,CAAEgB,IAAI,IAAK;QACtB,OAAOA,IAAI,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC;MAC7B,CAAC,CAAC;;MACF;IACJ;IACA,IAAG,YAAY,CAACC,IAAI,CAACP,GAAG,CAAC,EAAC;MACtB,IAAGZ,YAAY,CAACgB,MAAM,GAAG,CAAC,EAAC;QACvBf,eAAe,CAAEgB,IAAI,IAAK;UACtB,OAAOA,IAAI,GAAGL,GAAG;QACrB,CAAC,CAAC;MACN;IACJ;EACJ,CAAC;EAED,OAAM;IAACd,IAAI;IAAEE,YAAY;IAAEE,OAAO;IAAEI,SAAS;IAAEI;EAAW,CAAC;AAC/D,CAAC;AAAAb,EAAA,CArDKF,SAAS;AAwDf,eAAeA,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}