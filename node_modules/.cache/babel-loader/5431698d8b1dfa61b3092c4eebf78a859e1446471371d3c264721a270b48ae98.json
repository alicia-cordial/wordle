{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nconst useWordle = solution => {\n  _s();\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [guesses, setGuesses] = useState([...Array(6)]);\n  const [history, setHistory] = useState([]);\n  const [isCorrect, setIsCorrect] = useState(false);\n\n  //format a guess into an array of letter Objects\n  const formatGuess = () => {\n    let solutionArray = [...solution];\n    let formattedGuess = [...currentGuess].map(l => {\n      return {\n        key: l,\n        color: 'pink'\n      };\n    });\n\n    //find any green letters\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray[i] === l.key) {\n        formattedGuess[i].color = \"purple\";\n        solutionArray[i] = null;\n      }\n    });\n\n    //find any yellow letter\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray.includes(l.key) && l.color !== 'green') {\n        formattedGuess[i].color = \"lila\";\n        solutionArray[solutionArray.indexOf(l.key)] = null;\n      }\n    });\n    return formattedGuess;\n  };\n  const addNewGuess = formattedGuess => {\n    if (currentGuess === solution) {\n      setIsCorrect(true);\n    }\n    setGuesses(prevGuesses => {\n      let newGuesses = [...prevGuesses];\n      newGuesses[turn] = formatGuess;\n      return newGuesses;\n    });\n    setHistory(prevHistory => {\n      return [...prevHistory, currentGuess];\n    });\n    setTurn(prevTurn => {\n      return prevTurn + 1;\n    });\n    setCurrentGuess('');\n  };\n\n  //tracking current guess, user input\n  const handleKeyup = _ref => {\n    let {\n      key\n    } = _ref;\n    if (key === 'Enter') {\n      //only add guess if turn is less than 5\n      if (turn > 5) {\n        console.log('you used all your guesses');\n        return;\n      }\n      // do not allow duplicate words\n      if (history.includes(currentGuess)) {\n        console.log('you already tried that word');\n        return;\n      }\n      //check word is 5 chars word\n      if (currentGuess.length !== 5) {\n        console.log('word muss be 5 char long');\n        return;\n      }\n      const formatted = formatGuess();\n      addNewGuess(formatted);\n    }\n    if (key === 'Backspace') {\n      setCurrentGuess(prev => {\n        return prev.slice(0, -1); //return new string based on old string, remove letter\n      });\n\n      return;\n    }\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess(prev => {\n          return prev + key;\n        });\n      }\n    }\n  };\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyup\n  };\n};\n_s(useWordle, \"hw5nrnJSVOAMQL0G15231ydQo+E=\");\nexport default useWordle;","map":{"version":3,"names":["useState","useWordle","solution","_s","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","Array","history","setHistory","isCorrect","setIsCorrect","formatGuess","solutionArray","formattedGuess","map","l","key","color","forEach","i","includes","indexOf","addNewGuess","prevGuesses","newGuesses","prevHistory","prevTurn","handleKeyup","_ref","console","log","length","formatted","prev","slice","test"],"sources":["/Users/alicia/Documents/wordle/src/hooks/useWordle.js"],"sourcesContent":["import { useState } from \"react\"\nconst useWordle = (solution) =>{\n    const[turn, setTurn] = useState(0)\n    const[currentGuess, setCurrentGuess] = useState(\"\")\n    const[guesses, setGuesses] = useState([...Array(6)])\n    const[history, setHistory] = useState([])\n    const[isCorrect, setIsCorrect] = useState(false)\n\n    //format a guess into an array of letter Objects\n    const formatGuess = () => {\n        let solutionArray = [...solution]\n        let formattedGuess = [...currentGuess].map((l) => {\n            return {key: l, color: 'pink'}\n        })\n\n        //find any green letters\n        formattedGuess.forEach((l, i) => {\n            if(solutionArray[i] === l.key){\n                formattedGuess[i].color = \"purple\"\n                solutionArray[i] = null\n            }\n        })\n\n        //find any yellow letter\n        formattedGuess.forEach((l, i) => {\n            if(solutionArray.includes(l.key) && l.color !== 'green'){\n                formattedGuess[i].color = \"lila\"\n                solutionArray[solutionArray.indexOf(l.key)] = null\n            }\n        })\n        return formattedGuess\n    }\n\n    const addNewGuess = (formattedGuess) => {\n        if(currentGuess === solution){\n            setIsCorrect(true)\n        }\n        setGuesses((prevGuesses) => {\n            let newGuesses = [...prevGuesses]\n            newGuesses[turn] = formatGuess\n            return newGuesses\n        })\n        setHistory((prevHistory) => {\n            return [...prevHistory, currentGuess]\n        })\n        setTurn((prevTurn) => {\n            return prevTurn + 1\n        })\n        setCurrentGuess('')\n    }\n\n\n    //tracking current guess, user input\n    const handleKeyup = ({key}) => {\n        if(key === 'Enter'){\n            //only add guess if turn is less than 5\n            if(turn > 5){\n                console.log('you used all your guesses')\n                return\n            }\n            // do not allow duplicate words\n            if(history.includes(currentGuess)){\n                console.log('you already tried that word')\n                return\n            }\n            //check word is 5 chars word\n            if(currentGuess.length !== 5){\n                console.log('word muss be 5 char long')\n                return\n            }\n            const formatted = formatGuess()\n            addNewGuess(formatted)\n        }\n        if(key === 'Backspace'){\n            setCurrentGuess((prev) => {\n                return prev.slice(0, -1) //return new string based on old string, remove letter\n            })\n            return\n        }\n        if(/^[A-Za-z]$/.test(key)){\n            if(currentGuess.length < 5){\n                setCurrentGuess((prev) => {\n                    return prev + key\n                })\n            }\n        }\n    }\n\n    return{turn, currentGuess, guesses, isCorrect, handleKeyup}\n}\n\n\nexport default useWordle"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}