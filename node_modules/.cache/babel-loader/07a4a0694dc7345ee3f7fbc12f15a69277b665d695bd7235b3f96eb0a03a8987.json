{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nconst useWordle = solution => {\n  _s();\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [guesses, setGuesses] = useState([...Array(6)]); // each guess is an array\n  const [history, setHistory] = useState([]); // each guess is a string\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [usedKeys, setUsedKeys] = useState({});\n\n  // format a guess into an array of letter objects \n  // e.g. [{key: 'a', color: 'yellow'}]\n  const formatGuess = () => {\n    let solutionArray = [...solution];\n    let formattedGuess = [...currentGuess].map(l => {\n      return {\n        key: l,\n        color: 'lightblue'\n      };\n    });\n\n    // find any green letters\n    formattedGuess.forEach((l, i) => {\n      if (solution[i] === l.key) {\n        formattedGuess[i].color = 'purple';\n        solutionArray[i] = null;\n      }\n    });\n\n    // find any yellow letters\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray.includes(l.key) && l.color !== 'green') {\n        formattedGuess[i].color = 'pink';\n        solutionArray[solutionArray.indexOf(l.key)] = null;\n      }\n    });\n    return formattedGuess;\n  };\n\n  // add a new guess to the guesses state\n  // update the isCorrect state if the guess is correct\n  // add one to the turn state\n  const addNewGuess = formattedGuess => {\n    if (currentGuess === solution) {\n      setIsCorrect(true);\n    }\n    setGuesses(prevGuesses => {\n      let newGuesses = [...prevGuesses];\n      newGuesses[turn] = formattedGuess;\n      return newGuesses;\n    });\n    setHistory(prevHistory => {\n      return [...prevHistory, currentGuess];\n    });\n    setTurn(prevTurn => {\n      return prevTurn + 1;\n    });\n    setUsedKeys(prevUsedKeys => {\n      let newKeys = {\n        ...prevUsedKeys\n      };\n      formattedGuess.forEach(l => {\n        const currentColor = newKeys[l.key];\n        if (l.color === 'lightblue') {\n          newKeys[l.key] = \"lightblue\";\n          return;\n        }\n        if (l.color === 'purple' && currentColor !== 'lightblue') {\n          newKeys[l.key] = \"purple\";\n          return;\n        }\n      });\n    });\n    setCurrentGuess('');\n  };\n\n  // handle keyup event & track current guess\n  // if user presses enter, add the new guess\n  const handleKeyup = _ref => {\n    let {\n      key\n    } = _ref;\n    if (key === 'Enter') {\n      // only add guess if turn is less than 5\n      if (turn > 5) {\n        console.log('you used all your guesses!');\n        return;\n      }\n      // do not allow duplicate words\n      if (history.includes(currentGuess)) {\n        console.log('you already tried that word.');\n        return;\n      }\n      // check word is 5 chars\n      if (currentGuess.length !== 5) {\n        console.log('word must be 5 chars.');\n        return;\n      }\n      const formatted = formatGuess();\n      addNewGuess(formatted);\n    }\n    if (key === 'Backspace') {\n      setCurrentGuess(prev => prev.slice(0, -1));\n      return;\n    }\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess(prev => prev + key);\n      }\n    }\n  };\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyup\n  };\n};\n_s(useWordle, \"pbfF6lXJkK2HExjvqYaC4MQFrL4=\");\nexport default useWordle;","map":{"version":3,"names":["useState","useWordle","solution","_s","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","Array","history","setHistory","isCorrect","setIsCorrect","usedKeys","setUsedKeys","formatGuess","solutionArray","formattedGuess","map","l","key","color","forEach","i","includes","indexOf","addNewGuess","prevGuesses","newGuesses","prevHistory","prevTurn","prevUsedKeys","newKeys","currentColor","handleKeyup","_ref","console","log","length","formatted","prev","slice","test"],"sources":["/Users/alicia/Documents/wordle/src/hooks/useWordle.js"],"sourcesContent":["import { useState } from 'react'\n\nconst useWordle = (solution) => {\n  const [turn, setTurn] = useState(0) \n  const [currentGuess, setCurrentGuess] = useState('')\n  const [guesses, setGuesses] = useState([...Array(6)]) // each guess is an array\n  const [history, setHistory] = useState([]) // each guess is a string\n  const [isCorrect, setIsCorrect] = useState(false)\n  const [usedKeys, setUsedKeys] = useState({})\n\n  // format a guess into an array of letter objects \n  // e.g. [{key: 'a', color: 'yellow'}]\n  const formatGuess = () => {\n    let solutionArray = [...solution]\n    let formattedGuess = [...currentGuess].map((l) => {\n      return {key: l, color: 'lightblue'}\n    })\n\n    // find any green letters\n    formattedGuess.forEach((l, i) => {\n      if (solution[i] === l.key) {\n        formattedGuess[i].color = 'purple'\n        solutionArray[i] = null\n      }\n    })\n    \n    // find any yellow letters\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray.includes(l.key) && l.color !== 'green') {\n        formattedGuess[i].color = 'pink'\n        solutionArray[solutionArray.indexOf(l.key)] = null\n      }\n    })\n\n    return formattedGuess\n  }\n\n  // add a new guess to the guesses state\n  // update the isCorrect state if the guess is correct\n  // add one to the turn state\n  const addNewGuess = (formattedGuess) => {\n    if (currentGuess === solution) {\n      setIsCorrect(true)\n    }\n    setGuesses(prevGuesses => {\n      let newGuesses = [...prevGuesses]\n      newGuesses[turn] = formattedGuess\n      return newGuesses\n    })\n    setHistory(prevHistory => {\n      return [...prevHistory, currentGuess]\n    })\n    setTurn(prevTurn => {\n      return prevTurn + 1\n    })\n    setUsedKeys((prevUsedKeys) => {\n        let newKeys = {...prevUsedKeys}\n\n        formattedGuess.forEach((l) => {\n            const currentColor = newKeys[l.key]\n\n            if(l.color === 'lightblue'){\n                newKeys[l.key] = \"lightblue\"\n                return\n            }\n\n            if(l.color === 'purple' && currentColor !== 'lightblue'){\n                newKeys[l.key] = \"purple\"\n                return\n            }\n\n        })\n\n    })\n    setCurrentGuess('')\n  }\n\n  // handle keyup event & track current guess\n  // if user presses enter, add the new guess\n  const handleKeyup = ({ key }) => {\n    if (key === 'Enter') {\n      // only add guess if turn is less than 5\n      if (turn > 5) {\n        console.log('you used all your guesses!')\n        return\n      }\n      // do not allow duplicate words\n      if (history.includes(currentGuess)) {\n        console.log('you already tried that word.')\n        return\n      }\n      // check word is 5 chars\n      if (currentGuess.length !== 5) {\n        console.log('word must be 5 chars.')\n        return\n      }\n      const formatted = formatGuess()\n      addNewGuess(formatted)\n    }\n    if (key === 'Backspace') {\n      setCurrentGuess(prev => prev.slice(0, -1))\n      return\n    }\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess(prev => prev + key)\n      }\n    }\n  }\n\n  return {turn, currentGuess, guesses, isCorrect, handleKeyup}\n}\n\nexport default useWordle"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}